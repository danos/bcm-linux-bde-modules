--- /dev/null
+++ b/make/Makefile.linux-kernel-4_x_vyatta
@@ -0,0 +1,166 @@
+#
+#  Copyright (c) 2018-2019 AT&T Intellectual Property. All rights reserved.
+#  Copyright 2017 Broadcom
+#  
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License, version 2, as
+#  published by the Free Software Foundation (the "GPL").
+#  
+#  This program is distributed in the hope that it will be useful, but
+#  WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#  General Public License version 2 (GPLv2) for more details.
+#  
+#  You should have received a copy of the GNU General Public License
+#  version 2 (GPLv2) along with this source code.
+#
+
+# Configuration Flags
+
+# Filter out features that cannot or should not be supported in kernel mode
+
+_FEATURE_EXCLUDE_LIST += EDITLINE TCL OOB_RCPU CINT APIMODE DUNE_UI C_UNIT
+FEATURE_EXCLUDE_LIST = $(sort $(_FEATURE_EXCLUDE_LIST))
+
+# Tools
+
+# Conditionally Replaces DEFAULT var
+ifeq ($(origin CC),default)
+CC	= $(LSRUN) $(CROSS_COMPILE)gcc
+endif
+
+ifeq ($(origin CXX),default)
+CXX	= $(CROSS_COMPILE)g++
+endif
+
+ifeq ($(origin LD),default)
+LD	= $(CROSS_COMPILE)ld
+endif
+
+ifeq ($(origin AR),default)
+AR	= $(CROSS_COMPILE)ar
+endif
+
+ifeq ($(origin AS),default)
+AS	= $(CROSS_COMPILE)as
+endif
+
+ifeq ($(origin ARFLAGS),default)
+	ARFLAGS	= -rc
+endif
+
+STRIP	= $(CROSS_COMPILE)strip
+RANLIB  = $(CROSS_COMPILE)ranlib
+OBJCOPY = $(CROSS_COMPILE)objcopy
+NM      = $(CROSS_COMPILE)nm
+
+# Handle differences between gcc 2.x and gcc 3.x
+gcc-tune-flag = $(shell if ${CC} -dumpspecs | grep mcpu >/dev/null; then echo cpu; else echo tune; fi)
+
+# Configuration Variables
+
+# OSType Defines: This defines the type of RTOS or microkernel which you
+# are compiling the SAL (and its associated driver) for. New platforms
+# can be created by porting the routines (system.c) to your platform and
+# adding the define in this Makefile.
+OSTYPE = LINUX
+
+#
+# ORIGIN is used to Optionally select different CFLAGS. It is used to import
+# source from other vendors. If SOURCE=Broadcom, then the BCM_ flags are added
+# to those passed to the compiler. If SOURCE != Broadcom, BCM_ flags are NOT
+# added.
+#
+# Default specifies Broadcom
+#
+ifndef ORIGIN
+	ORIGIN = Broadcom
+endif
+
+#
+# STD_{C|CPP|CXX}FLAGS - Standard flags used by ALL compilations
+# BCM_{C|CPP|CXX}FLAGS - Flags used for Broadcom source files
+# OPT_{C|CPP|CXX}FLAGS - Defined in local make files BEFORE inclusion of 
+#			 this Makefile, to define local "Extra" flags.
+#
+
+ifdef IPROC_BUILD
+CFGFLAGS += -I$(SDK)/systems/linux/kernel/modules/include \
+	    -I$(SDK)/systems/bde/linux/include \
+	    -I$(LINUX_INCLUDE) \
+	    -I$(LINUX_INCLUDE)/uapi \
+	    -I$(LINUX_INCLUDE)/generated/uapi \
+		-I$(LINUX_INCLUDE)/generated \
+        -I$(KDIR)/source/include \
+        -I$(KDIR)/source/include/uapi/ \
+        -I$(KDIR)/source/arch/x86/include \
+        -I$(KDIR)/source/arch/x86/include/uapi \
+	    -I$(KDIR)/build/arch/x86 \
+	    -I$(KDIR)/build/arch/x86/include/uapi \
+	    -I$(KDIR)/build/arch/x86/include/generated \
+	    -I$(KDIR)/build/arch/x86/include/generated/uapi
+else
+CFGFLAGS += -I$(SDK)/systems/linux/kernel/modules/include \
+	    -I$(SDK)/systems/bde/linux/include \
+	    -I$(LINUX_INCLUDE) \
+	    -I$(LINUX_INCLUDE)/asm/gcc \
+	    -I$(LINUX_INCLUDE)/asm/mach-generic \
+	    -I$(LINUX_INCLUDE)/uapi \
+	    -I$(LINUX_INCLUDE)/generated/uapi \
+		-I$(LINUX_INCLUDE)/generated \
+        -I$(KDIR)/source/include \
+        -I$(KDIR)/source/include/uapi/ \
+        -I$(KDIR)/source/arch/x86/include \
+        -I$(KDIR)/source/arch/x86/include/uapi \
+	    -I$(KDIR)/build/arch/x86 \
+	    -I$(KDIR)/build/arch/x86/include/uapi \
+	    -I$(KDIR)/build/arch/x86/include/generated \
+	    -I$(KDIR)/build/arch/x86/include/generated/uapi
+endif
+
+CFGFLAGS += -DNO_FILEIO -DNO_CTRL_C -DNO_MEMTUNE
+
+CFGFLAGS += -D$(OSTYPE)
+
+# No user sal for the linux kernel
+# NO_SAL_APPL=1
+
+STD_CFLAGS = $(KFLAGS) $(CFGFLAGS)
+
+
+STD_CPPFLAGS = ${STD_CFLAGS}
+STD_CXXFLAGS = ${STD_CFLAGS}
+
+ifndef BCM_CFLAGS
+BCM_CFLAGS   = -Wall -Werror
+endif
+
+BCM_CPPFLAGS = ${BCM_CFLAGS}
+BCM_CXXFLAGS = ${BCM_CFLAGS}
+
+ifeq (${ORIGIN}, Broadcom)
+	CFLAGS   += ${STD_CFLAGS}   ${BCM_CFLAGS}   ${OPT_CFLAGS}
+	CPPFLAGS += ${STD_CPPFLAGS} ${BCM_CPPFLAGS} ${OPT_CPPFLAGS}
+	CXXFLAGS += ${STD_CXXFLAGS} ${BCM_CXXFLAGS} ${OPT_CXXFLAGS}
+else
+	CFLAGS   += ${STD_CFLAGS}   ${OPT_CFLAGS}
+	CPPFLAGS += ${STD_CPPFLAGS} ${OPT_CPPFLAGS}
+	CXXFLAGS += ${STD_CXXFLAGS} ${OPT_CXXFLAGS}
+endif
+
+#
+# Ignore pedantic flag for kernel modules
+#
+ifdef DEBUG_PEDANTIC
+DEBUG_PEDANTIC = FALSE
+endif
+
+#
+# DEPEND is used as a command to generate the list of dependencies.
+# The format of the output must be 
+#	"file.o : file.c a/b/c.h d/e/f.h ...", 
+# if it is on multiple lines, each line must end in a backslash. 
+# The output MUST be on standard out.
+#
+DEPEND = ${CC} -M $(CFLAGS) $<
+ 
--- /dev/null
+++ b/make/Makefile.linux-vyatta
@@ -0,0 +1,85 @@
+#  Copyright (c) 2018-2019 AT&T Intellectual Property. All rights reserved.
+#  Copyright 2017 Broadcom
+#  
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License, version 2, as
+#  published by the Free Software Foundation (the "GPL").
+#  
+#  This program is distributed in the hope that it will be useful, but
+#  WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#  General Public License version 2 (GPLv2) for more details.
+#  
+#  You should have received a copy of the GNU General Public License
+#  version 2 (GPLv2) along with this source code.
+
+CFGFLAGS += -DLONGS_ARE_64BITS
+CFGFLAGS += -DPTRS_ARE_64BITS
+CFGFLAGS += -DSAL_SPL_LOCK_ON_IRQ
+# Try to use MSI-X, falling back to MSI or INTx if not available
+CFGFLAGS += -DBDE_LINUX_USE_MSIX_INTERRUPT
+
+KVERS := $(shell cd /lib/modules/*/build/.. ; basename $$(pwd))
+KDIR := /lib/modules/$(KVERS)
+# Default kernel source directory
+ifeq (,$(KERNDIR))
+KERNDIR := $(KDIR)/build
+export KERNDIR
+endif
+
+ARCH = x86_64
+
+# Noisy kernel build
+KBUILD_VERBOSE = 1
+
+export KDIR ARCH KBUILD_VERBOSE KERNDIR
+
+# Default Linux include directory
+ifeq (,$(LINUX_INCLUDE))
+LINUX_INCLUDE := $(KERNDIR)/include
+endif
+
+# autoconf.h was moved in later kernels
+AUTOCONF = $(KERNDIR)/include/generated/autoconf.h
+ifeq (,$(shell ls $(AUTOCONF) 2>/dev/null))
+AUTOCONF = $(KERNDIR)/include/linux/autoconf.h
+endif
+
+# gcc system include path
+SYSINC = $(shell gcc -print-search-dirs | grep install | cut -c 10-)include
+
+ifeq (,$(KFLAGS))
+KFLAGS := -nostdinc -isystem $(SYSINC) -I$(KERNDIR)/include -I$(KERNDIR)/arch/x86/include -include $(AUTOCONF) -D__KERNEL__ -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -Werror-implicit-function-declaration -Wno-format-security -fno-delete-null-pointer-checks -Os -m64 -mtune=generic -mno-red-zone -funit-at-a-time -maccumulate-outgoing-args -DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1 -pipe -Wno-sign-compare -fno-asynchronous-unwind-tables -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -fno-stack-protector -fomit-frame-pointer -g -Wdeclaration-after-statement -Wno-pointer-sign
+endif
+
+ifeq ($(LINUX_MAKE_SHARED_LIB),1)
+KFLAGS += -fPIC -mcmodel=small
+else
+KFLAGS += -mcmodel=kernel -fno-PIE
+endif
+
+CFGFLAGS += -DSYS_BE_PIO=0 -DSYS_BE_PACKET=0 -DSYS_BE_OTHER=0
+ENDIAN = LE_HOST=1
+CFGFLAGS += -D$(ENDIAN)
+CFGFLAGS += -DBCM_PLATFORM_STRING=\"X86\"
+ifeq (,$(findstring -DSAL_BDE_DMA_MEM_DEFAULT,$(CFGFLAGS)))
+CFGFLAGS += -DSAL_BDE_DMA_MEM_DEFAULT=32
+endif
+
+# Extra variables.
+EXTRA_CFLAGS = -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags)
+
+comma = ,
+basetarget = $(basename $(notdir $@))
+modname = $(basetarget)
+
+name-fix = $(subst $(comma),_,$(subst -,_,$1))
+basename_flags = -D"KBUILD_BASENAME=KBUILD_STR($(call name-fix,$(basetarget)))"
+modname_flags  = $(if $(filter 1,$(words $(modname))),\
+-D"KBUILD_MODNAME=KBUILD_STR($(call name-fix,$(modname)))")
+
+ifneq ($(targetplat),user)
+# By default we exclude -Werror from x86 kernel builds
+BCM_CFLAGS   = -Wall
+include ${SDK}/make/Makefile.linux-kernel-4_x_vyatta
+endif
--- /dev/null
+++ b/systems/linux/user/vyatta/Makefile
@@ -0,0 +1,42 @@
+#
+#  Copyright (c) 2018-2019 AT&T Intellectual Property. All rights reserved.
+#  Copyright 2017 Broadcom
+#  
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License, version 2, as
+#  published by the Free Software Foundation (the "GPL").
+#  
+#  This program is distributed in the hope that it will be useful, but
+#  WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#  General Public License version 2 (GPLv2) for more details.
+#  
+#  You should have received a copy of the GNU General Public License
+#  version 2 (GPLv2) along with this source code.
+#
+
+SDK :=$(shell if [ -n "$$SDK" ] ; then\
+	echo $$SDK;\
+	else\
+	cd $(dir $(lastword $(MAKEFILE_LIST))); while /usr/bin/test ! -e RELEASE ; do \
+	dir=`cd ../;pwd`;			\
+	if [ "$$dir" = "/" ] ; then		\
+	   echo Cannot find SDK in $(lastword $(MAKEFILE_LIST)) 1>&2;		\
+	   exit 1;				\
+	fi ;					\
+	cd $$dir;				\
+	done ;					\
+	pwd;					\
+	fi)
+
+ifeq ($(SDK),)					
+$(error Please run this in a tree)		
+endif 				
+
+export SDK
+
+override kernel_version=2_6
+platform=vyatta
+
+LINUX_MAKE_USER=1
+include ${SDK}/make/Make.linux
--- a/systems/linux/kernel/modules/shared/ksal.c
+++ b/systems/linux/kernel/modules/shared/ksal.c
@@ -180,9 +180,9 @@ sal_sem_give(sal_sem_t b)
 uint32
 sal_time_usecs(void)
 {
-    struct timeval ltv;
-    do_gettimeofday(&ltv);
-    return (ltv.tv_sec * SECOND_USEC + ltv.tv_usec);
+    struct timespec64 ltv;
+    ktime_get_real_ts64(&ltv);
+    return (ltv.tv_sec * SECOND_USEC + ltv.tv_nsec / 1000);
 }
     
 void
